###############################
# FICHIER /.auto-install/Brewfile
###############################

brew "curl"         # HTTP CLIENT → Required to donwload Homebrew and GACLI files
brew "bash"         # SHELL INTERPRETER → Required to run Homebrew
brew "zsh"          # SHELL INTERPRETER → Required to run GACLI
brew "coreutils"    # CROSS-PLATFORM TOOLS → Required to run GACLI on macOS and Linux
brew "yq"           # YAML PARSER → Required to parse GACLI config files
brew "jq"           # JSON PARSER → Required by "yq"

#!/usr/bin/env sh
###############################
# FICHIER /src/.auto-install/install.sh
###############################

# Run it automaticaly:
# TODO: curl (local + Docker image with curl / wget + VM macOS)

# Run it manually:
# Move this file to your local shared folder (volume) then run:
# docker run --rm -v "/Users/gui/Repos/docker/shared:/shared" -it ubuntu sh -c ". /shared/install.sh; exec zsh"

# TODO: Télécharger uniquement le dossier "gacli/src" et le fichier "gacli/installer/Brewfile"
# TODO: Après l'install → supprimer les fichiers "install.sh" et Brewfile

# Options
FORCE_MODE="false"

# OS variables
IS_MACOS=false
IS_LINUX=false
SHELL_PATH=""
SHELL_NAME=""

# GACLI urls
REPO="https://github.com/guillaumeast/gacli"
ARCHIVE="${REPO}/archive/refs/heads/dev.tar.gz"

# GACLI paths
DIR=".gacli"
ENTRY_POINT="main.zsh"
ZSHRC=".zshrc"

# WRAPPER
SYM_DIR=".local/bin"
SYMLINK="gacli"

# Colors
RED="$(printf '\033[31m')"
GREEN="$(printf '\033[32m')"
YELLOW="$(printf '\033[33m')"
CYAN="$(printf '\033[36m')"
ORANGE="$(printf '\033[38;5;208m')"
GREY="$(printf '\033[90m')"
NONE="$(printf '\033[0m')"
BOLD="$(printf '\033[1m')"

# Emojis
EMOJI_SUCCESS="✦"
EMOJI_WARN="⚠️ "
EMOJI_ERR="❌"
EMOJI_INFO="✧"
EMOJI_HIGHLIGHT="👉"
EMOJI_DEBUG="🔎"
EMOJI_WAIT="⏳"

# ────────────────────────────────────────────────────────────────
# PSEUDO-CODE
# ────────────────────────────────────────────────────────────────

# install.sh
# |→ ✅ init_style                → Enable emojis if system can handle it + welcome message
# |→ ✅ init_style                → Standardize output formatting
# |
# |→ ✅ parse_args                → Inits global variables referring to given args
# |→ ✅ resolve_paths             → Resolve relative paths to absolute paths
# |→ ✅ check_env                 → Detect environment: OS, default shell and privilege
# |
# |→ ✅ install_brew_deps         → Install Homebrew dependencies with current package manager
# |→ ✅ install_brew              → Install Homebrew
# |→ ✅ install_zsh               → Ensure ZSH is the default shell
# |
# |→ ✅ download_gacli            → Download GACLI files from Github
# |→ ✅ install_gacli_deps        → Install GACLI dependencies from "${DIR}/.auto-install/Brewfile"
# |→ ✅ make_executable           → Ensure GACLI entry point is executable
# |→ ✅ create_wrapper            → Generate a small shell script to launch GACLI reliably across shells
# |→ ✅ update_zshrc              → Append GACLI to PATH and source its entry point in ~/.zshrc
# |
# |→ ✅ auto_launch               → Launch GACLI

# ────────────────────────────────────────────────────────────────
# MAIN
# ────────────────────────────────────────────────────────────────

# Entry point that sequences environment checks, download, install and shell reload
main() {

    init_style
    printStyled highlight "Initializing..."
    parse_args "$@" || return 1
    resolve_paths   || return 2

    echo ""
    printStyled highlight "Checking environment..."
    check_env       || return 3

    echo ""
    printStyled highlight "Installing package manager: Homebrew..."
    install_brew    || return 4

    # echo ""
    # printStyled highlight "Installing shell: zsh..."
    # TODO: fix install_zsh     || return 5

    echo ""
    printStyled highlight "Downloading GACLI ${GREY}→${CYAN} ${DIR}${GREY}...${NONE}"
    download_gacli  || return 6

    echo ""
    printStyled highlight "Installing GACLI dependencies... ${EMOJI_WAIT}"
    install_gacli_deps    || return 7

    echo ""
    printStyled highlight "Installing GACLI CLI..."
    make_executable || return 8
    create_wrapper  || return 9
    update_zshrc    || return 10

    auto_launch     || return 11
}

# ────────────────────────────────────────────────────────────────
# OUTPUT FORMATTING
# ────────────────────────────────────────────────────────────────

# Prints ASCII banner and activates emoji styling when UTF‑8 is supported
init_style() {
    printf "%s\n" "${ORANGE}  _____          _____ _      _____ ${NONE}"
    printf "%s\n" "${ORANGE} / ____|   /\\   / ____| |    |_   _|${NONE}"
    printf "%s\n" "${ORANGE}| |  __   /  \\ | |    | |      | |  ${NONE}"
    printf "%s\n" "${ORANGE}| | |_ | / /\\ \\| |    | |      | |  ${NONE}"
    printf "%s\n" "${ORANGE}| |__| |/ ____ \\ |____| |____ _| |_ ${NONE}"
    printf "%s\n" "${ORANGE} \\_____/_/    \\_\\_____|______|_____|${NONE}"
    printf "%s\n" ""
}

# Centralised formatter to colour‑code and prefix log messages by severity
printStyled() {
    style=$1
    msg=$2
    color=$NONE
    case "$style" in
        error)
            printf "%s\n" "${RED}${BOLD}${EMOJI_ERR} ${msg}${NONE}" >&2
            return ;;
        warning)
            printf "%s\n" "${YELLOW}${BOLD}${EMOJI_WARN} ${msg}${NONE}" >&2
            return ;;
        success)
            color=$GREEN
            prefix=$EMOJI_SUCCESS
            ;;
        info)
            color=$GREY
            prefix=$EMOJI_INFO
            ;;
        highlight)
            color=$NONE
            prefix=$EMOJI_HIGHLIGHT
            ;;
        *)
            prefix=""
            ;;
    esac
    printf "%s\n" "${color}${prefix} ${msg}${NONE}"
}

# ────────────────────────────────────────────────────────────────
# CHECK ENV
# ────────────────────────────────────────────────────────────────

# Parses CLI options (currently only --force) and sets corresponding flags
parse_args() {
    for arg in "$@"; do
        case "$arg" in
            --force)
                FORCE_MODE="true"
                ;;
            *)
                printStyled error "Expected : --force (received : $arg)"
                return 1
                ;;
        esac
    done
    printStyled info "Arguments: ${GREEN}parsed${NONE}"
}

# Expands user‑relative paths, ensures .zshrc exists, and defines wrapper targets
resolve_paths() {
    [ -n "$HOME" ] || { printStyled error "\$HOME not set"; return 1; }

    DIR="$HOME/$DIR"
    ENTRY_POINT="$DIR/$ENTRY_POINT"
    ZSHRC="$HOME/$ZSHRC"
    SYM_DIR="$HOME/$SYM_DIR"
    SYMLINK="$SYM_DIR/$SYMLINK"
    printStyled info "Paths: ${GREEN}resolved${NONE}"
}

# Detects OS, default shell and privilege
check_env() {
    # Detect OS via uname
    ud=$(uname -s)
    case "$ud" in
        Darwin) IS_MACOS=true ;;
        Linux)  IS_LINUX=true ;;
        *)      printStyled error "Unsupported OS: $ud"; return 1 ;;
    esac
    printStyled info "OS detected: ${GREEN}$ud${NONE}"

    # Detect default shell
    SHELL_PATH=${SHELL:-$(command -v sh)}
    SHELL_NAME=$(basename "$SHELL_PATH")
    if [ $SHELL_NAME = "zsh" ]; then
        color="${GREEN}"
    elif [ -n "$SHELL_NAME" ]; then
        color="${ORANGE}"
    else
        color="${RED}"
        SHELL_NAME="unknwon"
    fi
    printStyled info "Default shell: ${color}${SHELL_NAME}${GREY} → ${CYAN}${SHELL_PATH}${NONE}"

    # — Privilege escalation setup —
    if [ "$(id -u)" -ne 0 ]; then
        if command -v sudo >/dev/null 2>&1; then
            SUDO="sudo"
            printStyled info "Privilege: ${GREEN}sudo enabled${NONE}"
        else
            SUDO=""
            printStyled info "Privilege: ${ORANGE}No sudo detected → non-root installs may fail${NONE}"
        fi
    else
        SUDO=""
        printStyled info "Privilege: ${GREEN}root${NONE}"
    fi
}

# ────────────────────────────────────────────────────────────────
# SETUP ENV
# ────────────────────────────────────────────────────────────────

# Installs Homebrew when absent, selecting curl or wget as downloader
install_brew() {
    
    # Check if Installed
    if command -v brew >/dev/null 2>&1; then
        printStyled success "Detected: ${GREEN}Homebrew${NONE}"
        return 0
    fi

    # Install Homebrew dependencies
    install_brew_deps

    # Install
    printStyled info "Installing ${ORANGE}Homebrew${GREY}... ${EMOJI_WAIT}"
    yes '' | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" >/dev/null 2>&1
    
    # Setup Linux env
    if [ "$IS_LINUX" = true ]; then
        files="/root/.profile /root/.kshrc /root/.bashrc /root/.zshrc /root/.dashrc /root/.tcshrc /root/.cshrc"
        printStyled info "Configuring ${ORANGE}Linux${GREY}..."

        # Add Homebrew to all source files
        for file in $files; do
            echo >> "$file"
            echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> "$file"
        done

        # Add Homebrew to current session
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

        # Install gcc if missing
        if ! command -v gcc >/dev/null 2>&1; then
            brew install gcc >/dev/null 2>&1
        fi
    fi

    # Check install
    if ! command -v brew >/dev/null 2>&1; then
        printStyled error "Unable to install ${GREEN}Homebrew${NONE}"
        return 1
    fi
    
    # Success
    printStyled info "Installed: ${GREEN}Homebrew${NONE}"
}

# Installs Homebrew dependencies
install_brew_deps() {
    
    # Depending on current package manager
    if command -v apt >/dev/null 2>&1; then
        printStyled info "Current package manager: ${ORANGE}apt${NONE}"
        printStyled info "Installing Homebrew dependencies... ${EMOJI_WAIT}"
        $SUDO apt-get update -y >/dev/null 2>&1
        $SUDO apt-get install -y build-essential procps curl file git bash >/dev/null 2>&1
    elif command -v dnf >/dev/null 2>&1; then
        printStyled info "Current package manager: ${ORANGE}dnf${NONE}"
        printStyled info "Installing Homebrew dependencies... ${EMOJI_WAIT}"
        $SUDO dnf groupinstall -y "Development Tools" >/dev/null 2>&1
        $SUDO dnf install -y procps-ng file bash >/dev/null 2>&1
    elif command -v pacman >/dev/null 2>&1; then
        printStyled info "Current package manager: ${ORANGE}pacman${NONE}"
        printStyled info "Installing Homebrew dependencies... ${EMOJI_WAIT}"
        $SUDO pacman -Sy --noconfirm base-devel procps-ng curl file git bash >/dev/null 2>&1
    elif command -v yum >/dev/null 2>&1; then
        printStyled info "Current package manager: ${ORANGE}yum${NONE}"
        printStyled info "Installing Homebrew dependencies... ${EMOJI_WAIT}"
        $SUDO yum groupinstall 'Development Tools' >/dev/null 2>&1
        $SUDO yum install -y procps-ng curl file git bash >/dev/null 2>&1
    else
        printStyled warning "No supported package manager found"
    fi
}

# Install zsh (if needed) and make it the user’s default login shell
install_zsh() {
    printStyled info "Trying to install zsh..."

    target_shell=$(command -v zsh)
    [ -z "$target_shell" ] && {
        printStyled error "zsh not found in PATH"
        return 1
    }

    # Ajoute zsh dans /etc/shells si besoin
    if [ -n "$SUDO" ] && [ -w /etc/shells ] && ! grep -q "$target_shell" /etc/shells 2>/dev/null; then
        echo "$target_shell" | $SUDO tee -a /etc/shells >/dev/null
    fi

    # Détermine le shell actuel
    current_shell=$(getent passwd "$(id -un)" 2>/dev/null | cut -d: -f7)
    [ -z "$current_shell" ] && current_shell="$SHELL"

    if [ "$current_shell" = "$target_shell" ]; then
        printStyled success "Default shell already ${GREEN}zsh${NONE}"
        return 0
    fi

    printStyled info "Switching default shell to ${ORANGE}zsh${GREY}..."
    
    # Ne tente pas de changer dans un conteneur Docker
    if grep -qa 'docker\|lxc' /proc/1/cgroup 2>/dev/null; then
        printStyled warning "Running in a container → skipping chsh"
        return 0
    fi

    if command -v chsh >/dev/null 2>&1; then
        if [ -n "$SUDO" ]; then
            $SUDO chsh -s "$target_shell" "$(id -un)" >/dev/null 2>&1
        else
            chsh -s "$target_shell" >/dev/null 2>&1
        fi
        printStyled success "Default shell changed: ${GREEN}zsh${NONE}"
    else
        printStyled warning "chsh not available → cannot change default shell"
    fi
}

# ────────────────────────────────────────────────────────────────
# INSTALL GACLI
# ────────────────────────────────────────────────────────────────

# Retrieves GACLI source (curl, wget or git) into the target directory, honouring --force
download_gacli() {

    # Create destination folder
    [ ! -d "$DIR" ] || {
        [ "$FORCE_MODE" = "true" ] && { rm -rf "$DIR"; } || {
            printStyled error "$DIR already exists (--force to overwrite)"
            return 1
        }
    }
    mkdir -p "$DIR" || { printStyled error "Unable to create $DIR"; return 1; }

    # Download → TODO: only download src folder !
    if curl -fsSL "$ARCHIVE" | tar -xzf - -C "$DIR" --strip-components=1 >/dev/null 2>&1; then
        printStyled success "Downloaded"
        return 0
    else
        printStyled warning "Download failed"
    fi
}

# Runs brew bundle on the downloaded Brewfile to install required formulae and casks
install_gacli_deps() {
    brewfile="$DIR/.auto-install/Brewfile"
    if command -v brew >/dev/null 2>&1 && [ -f "$brewfile" ]; then
        brew bundle --file="$brewfile" >/dev/null || {
            printStyled error "Failed to run Brewfile"
            return 1
        }
        printStyled success "Installed"
    else
        printStyled warning "No Brewfile found or brew unavailable → skipping"
    fi
}

# Adds execute permission to the downloaded GACLI entry‑point script
make_executable() {
    chmod +x "$ENTRY_POINT" || {
        printStyled warning "Failed make $ENTRY_POINT executable"
        return 1
    }
    printStyled info "Entry point: ${GREEN}executable${NONE}"
}

# Generates a wrapper in $HOME/.local/bin that relays args to the entry point via zsh
create_wrapper() {
    mkdir -p "$SYM_DIR" || {
        printStyled warning "Failed to create $SYM_DIR"; return 1
    }

    if [ -f "$SYMLINK" ] || [ -d "$SYMLINK" ] || [ -L "$SYMLINK" ]; then
        rm -f "$SYMLINK"
    fi

    {
        printf '%s\n' '#!/usr/bin/env sh'
        printf '%s\n' "exec zsh \"$ENTRY_POINT\" \"\$@\""
    } > "$SYMLINK" && chmod +x "$SYMLINK" || {
        printStyled warning "Failed to create wrapper"; return 1
    }
    printStyled info "Wrapper: ${GREEN}created${GREY} → ${CYAN}$SYMLINK${GREY} → ${CYAN}$ENTRY_POINT${NONE}"
}

# Appends PATH export and source command to the user’s .zshrc when missing
update_zshrc() {

    touch "$ZSHRC" || {
        printStyled error "Unable to create .zshrc file: $ZSHRC"
        return 1
    }

    if grep -q '# GACLI' "$ZSHRC"; then
        printStyled success ".zshrc already configured"
        return 0
    fi
    {
        printf '\n\n# GACLI\n'
        printf 'export PATH="%s:$PATH"\n' "$SYM_DIR"
        printf 'source "%s"\n' "$ENTRY_POINT"
    } >> "$ZSHRC" || {
        printStyled warning "Failed update $ZSHRC"; return 1
    }
    printStyled info ".zshrc: ${GREEN}updated${NONE}"
}

# ────────────────────────────────────────────────────────────────
# RUN
# ────────────────────────────────────────────────────────────────

auto_launch() {
    echo ""
    printStyled success "GACLI successfully installed 🚀"
    echo ""
    if [ -n "$ZSH_VERSION" ]; then
        printStyled info "Reloading shell... ${EMOJI_WAIT}"
        exec zsh
    else
        printStyled warning "Open a new terminal or run: exec zsh"
        echo ""
    fi
}

# Displays success message and either execs a new zsh or prompts the user to reopen a shell
main "$@"

#!/usr/bin/env zsh
###############################
# FICHIER /src/helpers/brew.zsh
###############################

# ────────────────────────────────────────────────────────────────
# PUBLIC
# ────────────────────────────────────────────────────────────────

# Run Homebrew bundle if at least one formula or cask from given Brewfile is not yet active
brew_bundle() {
    local brewfile="${1}"

    _brew_is_update_due "${1}" || return 0

    # Loading mesage
    print ""
    printStyled "info" "Updating... (this may take a few minutes) ⏳"

    # Update Homebrew
    if ! brew update  > /dev/null 2>&1; then
        printStyled warning "Failed to update Homebrew"
    fi

    # Install/uninstall formulae & casks referring to the Brewfile
    if ! brew bundle --file="${brewfile}" 1>/dev/null; then
        printStyled error "Failed to run bundle Homebrew"
        return 1
    fi

    # Upgrade
    if ! brew upgrade 1>/dev/null; then
        printStyled error "Failed to upgrade Homebrew packages"
        return 1
    fi

    # Cleanup
    if ! brew cleanup 1>/dev/null; then
        printStyled warning "Failed to cleanup Homebrew packages"
    fi
}

# Check if given formula is active
brew_is_f_active() {
    local formula="${1}"
    [[ "$formula" = "coreutils" ]] && formula="gdate"

    if command -v $formula >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Check if given cask is active
brew_is_c_active() {
    local cask="${1}"

    # "my-cask-name" → "My Cask Name.app"
    local app_name="$(echo "$cask" | sed -E 's/-/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1').app"

    # Check .app folders first for speed, fallback to brew if missing
    if [[ -d "/Applications/$app_name" || -d "$HOME/Applications/$app_name" ]]; then
        return 0
    elif brew list --cask "$cask" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# ────────────────────────────────────────────────────────────────
# PRIVATE
# ────────────────────────────────────────────────────────────────

# Install Homebrew
_brew_install() {

    # Check if Homebrew is already installed
    if command -v brew >/dev/null 2>&1; then
        return 0
    fi
    printStyled info "Installing ${ORANGE}Homebrew${GREY}... ⏳"

    # Resolve install command
    local install_cmd="/bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
    if $IS_MACOS || $IS_LINUX; then
        if $IS_LINUX; then
            install_cmd="NONINTERACTIVE=1 ${install_cmd}"
        fi
    else
        printStyled error "Unsupported OS: ${OSTYPE}"
        return 1
    fi

    # Execute install command
    if ! eval "$install_cmd"; then
        printStyled error "Homebrew installation failed"
        return 1
    fi

    # Add Homebrew to PATH
    local brew_exec_path
    if ! brew_exec_path="$(command -v brew)"; then
        printStyled error "Failed to detect brew after installation"
        return 1
    fi

    # Check if install is successful
    if ! eval "$("$brew_exec_path" shellenv)"; then
        printStyled error "Failed to set Homebrew environment"
        return 1
    fi

    # Refresh command hash table
    if ! hash -r; then
        printStyled warning "Failed to refresh shell hash table"
    fi
}

# Check if at least one formula or cask from given Brewfile is not active
_brew_is_update_due() {
    local brewfile="${1}"
    local formulae=()
    local casks=()

    # Arg check
    [[ -f "${brewfile}" ]] || {
        printStyled error "Expected: <brewfile> (received: ${brewfile})"
        return 1
    }

    # Get formulae from $brewfile
    formulae+=("${(@f)$(file_read "${brewfile}" "formulae")}") || {
        printStyled error "Unable to read Brewfile: ${brewfile}"
        return 1
    }

    # Check each formula status
    for formula in "${formulae[@]}"; do
        brew_is_f_active "${formula}" || return 0
    done

    # Get casks from $brewfile
    casks+=("${(@f)$(file_read "${brewfile}" "casks")}") || {
        printStyled error "Unable to read Brewfile: ${brewfile}"
        return 1
    }

    # Check each cask status
    for cask in "${casks[@]}"; do
        brew_is_c_active "${cask}" || return 0
    done
}

#!/usr/bin/env zsh
###############################
# FICHIER /src/helpers/parser.zsh
###############################

# ────────────────────────────────────────────────────────────────
# PUBLIC
# ────────────────────────────────────────────────────────────────

# PUBLIC - Read a scalar/list value from any file
# file_read <file> <key>
file_read() {
  local file=$1
  local key=$2
  local extension=""

  # Check file integrity
  if [[ ! -f $file ]]; then
    printStyled error "Unable to find file: ${file}"
    return 1
  fi

  # Check key intergity
  if [[ -z $key ]]; then
    printStyled error "Incorrect key: '${key}'"
    return 1
  fi

  # Get extension
  if ! extension=$(_get_extension $file); then
    printStyled error "Unable to detect file format: ${file}"
    return 1
  fi

  # Dispatch
  case "$extension" in
    json)
      echo "$(_json_read "${file}" "${key}")" || return 1
      ;;
    brewfile)
      echo "$(_brew_read "${file}" "${key}")" || return 1
      ;;
    *)
      printStyled error "Format not supported: ${extension}"
      return 1
      ;;
  esac
}

# PUBLIC - Write a scalar value into any file
# file_write <file> <key> <value>
file_write() {
  local file=$1
  local key=$2
  local value=$3
  local extension=""

  # Check file integrity
  if [[ ! -f $file ]]; then
    printStyled error "Unable to find file: ${file}"
    return 1
  fi

  # Check key intergity
  if [[ -z $key ]]; then
    printStyled error "Incorrect key: '${key}'"
    return 1
  fi

  # Get extension
  if ! extension=$(_get_extension $file); then
    printStyled error "Unable to detect file format: ${file}"
    return 1
  fi

  # Dispatch
  case "$extension" in
    json)
      _json_write "${file}" "${key}" "${value}" || return 1
      ;;
    brewfile)
      _brew_add "${file}" "${key}" "${value}" || return 1
      ;;
    *)
      printStyled error "Format not supported: ${extension}"
      return 1
      ;;
  esac
}

# PUBLIC - Reset a list value into any file
file_reset() {
  local file=$1
  local key=$2
  local extension=""

  # Check file integrity
  if [[ ! -f $file ]]; then
    printStyled error "Unable to find file: ${file}"
    return 1
  fi

  # Check key intergity
  if [[ -z $key ]]; then
    printStyled error "Incorrect key: '${key}'"
    return 1
  fi

  # Get extension
  if ! extension=$(_get_extension $file); then
    printStyled error "Unable to detect file format: ${file}"
    return 1
  fi

  # Dispatch
  case "$extension" in
    json)
      _json_reset "${file}" "${key}" || return 1
      ;;
    brewfile)
      _brew_reset "${file}" "${key}" || return 1
      ;;
    *)
      printStyled error "Format not supported: ${extension}"
      return 1
      ;;
  esac
}

# PUBLIC - Add a list of values to a list into any file
file_add() {
  local file=$1
  local key=$2
  shift 2               # Remove the two first args
  local values=("$@")   # Remaining args are the list of values to add
  local extension=""

  # Check file integrity
  if [[ ! -f $file ]]; then
    printStyled error "Unable to find file: ${file}"
    return 1
  fi

  # Check key intergity
  if [[ -z $key ]]; then
    printStyled error "Incorrect key: '${key}'"
    return 1
  fi

  # Get extension
  if ! extension=$(_get_extension $file); then
    printStyled error "Unable to detect file format: ${file}"
    return 1
  fi

  # Dispatch
  case "$extension" in
    json)
        for value in "${values[@]}"; do
            _json_add "${file}" "${key}" "${value}" || return 1
        done
        ;;
    brewfile)
        for value in "${values[@]}"; do
            _brew_add "${file}" "${key}" "${value}" || return 1
        done
        ;;
    *)
      printStyled error "Format not supported: ${extension}"
      return 1
      ;;
  esac
}

# PUBLIC - Remove a list of values from a list into any file
file_rm() {
  local file=$1
  local key=$2
  shift 2               # Remove the two first args
  local values=("$@")   # Remaining args are the list of values to add
  local extension=""

  # Check file integrity
  if [[ ! -f $file ]]; then
    printStyled error "Unable to find file: ${file}"
    return 1
  fi

  # Check key intergity
  if [[ -z $key ]]; then
    printStyled error "Incorrect key: '${key}'"
    return 1
  fi

  # Get extension
  if ! extension=$(_get_extension $file); then
    printStyled error "Unable to detect file format: ${file}"
    return 1
  fi

  # Dispatch
  case "$extension" in
    json)
        for value in "${values[@]}"; do
            _json_rm "${file}" "${key}" "${value}" || return 1
        done
        ;;
    brewfile)
        for value in "${values[@]}"; do
            _brew_rm "${file}" "${key}" "${value}" || return 1
        done
        ;;
    *)
      printStyled error "Format not supported: ${extension}"
      return 1
      ;;
  esac
}

# ────────────────────────────────────────────────────────────────
# PRIVATE
# ────────────────────────────────────────────────────────────────

# PRIVATE - Return file extension in lowercase (special case for Brewfile)
# __get_extension <file>
_get_extension() {
    local file="${1}"
    local file_name="${file##*/}"
    local extension="${file##*.}"

    if [[ $file_name = "Brewfile" ]]; then
        extension="Brewfile"
    fi

    echo "${extension:l}"
}

# ────────────────────────────────────────────────────────────────
# JSON
# ────────────────────────────────────────────────────────────────

# PRIVATE - Read scalar/list value from JSON file
# _json_read <file> <key>
_json_read() {
  local file=$1
  local key=$2
  local output=()

  # Check if the key exists
  if ! jq -e "has(\"$key\")" "$file" >/dev/null; then
    print "${RED}Error: key '${key}' does not exist in ${file}${NONE}" >&2
    return 1
  fi

  # Get the value type
  local type=$(jq -r ".${key} | type" "$file") || {
    print "${RED}Error: unable to fetch key '${key}' type in ${file}${NONE}" >&2
    return 1
  }

  case "$type" in
    "null")
      # Key exists but value is null → return empty string
      echo $output
      ;;
    "string")
      output=("${(Q)$(jq -r ".${key}" "$file")}")
      echo $output
      ;;
    "array")
      output=("${(@f)$(jq ".${key}[]" "$file")}")
      echo $output
      ;;
    *)
      print "${RED}Error: unsupported type '${type}' for key '${key}'${NONE}" >&2
      echo $output
      return 1
      ;;
  esac
}

# PRIVATE - Write scalar value into JSON file
# _json_write <file> <key> <value>
_json_write() {
  local file=$1
  local key=$2
  local value=$3

  jq --arg key "$key" --arg value "$value" '.[$key] = $value' "$file" > "${file}.tmp" || return 1
  mv "${file}.tmp" "${file}" || return 1
}

# PRIVATE - Reset list value into JSON file
# _json_reset <file> <key>
_json_reset() {
  local file=$1
  local key=$2

  jq --arg key "$key" '.[$key] = null' "$file" > "${file}.tmp" || return 1
  mv "${file}.tmp" "$file" || return 1
}

# PRIVATE - Add value to a list into JSON file
# _json_add <file> <key> <value>
_json_add() {
  local file=$1
  local key=$2
  local value=$3

  jq --arg key "$key" --arg value "$value" '.[$key] += [$value]' "$file" > "${file}.tmp" || return 1
  mv "${file}.tmp" "$file" || return 1
}

# PRIVATE - Remove value from a list into JSON file
# _json_rm <file> <key> <value>
_json_rm() {
  local file=$1
  local key=$2
  local value=$3

  jq --arg key "$key" --arg value "$value" '.[$key] |= map(select(. != $value))' "$file" > "${file}.tmp" || return 1
  mv "${file}.tmp" "$file" || return 1
}

# ────────────────────────────────────────────────────────────────
# Brewfile
# ────────────────────────────────────────────────────────────────


# PRIVATE - Read values from a Brewfile (formulae or casks)
# _brew_read <file> <key>
_brew_read() {
  local file="${1}"
  local key="${2}"
  local output=()

  case "${key}" in
    formulae)
      output=("${(@f)$(grep '^brew "' "$file" | cut -d'"' -f2 2>/dev/null | sed 's/.*/"&"/')}")
      ;;
    casks)
      output=("${(@f)$(grep '^cask "' "$file" | cut -d'"' -f2 2>/dev/null | sed 's/.*/"&"/')}")
      ;;
    *)
      printStyled error "Unknown key for brewfile: '${key}'"
      return 1
      ;;
  esac

  echo $output
}

# PRIVATE - Reset list value into a Brewfile
# _brew_reset <file> <key>
_brew_reset() {
  local file="${1}"
  local key="${2}"
  local tmp_file="$(mktemp)"

  case "${key}" in
      formulae)
          grep -v '^brew "' "${file}" > "${tmp_file}" || {
              printStyled error "Failed to clean formulae from ${file}"
              rm -f "$tmp_file"
              return 1
          }
          ;;
      casks)
          grep -v '^cask "' "${file}" > "${tmp_file}" || {
              printStyled error "Failed to clean casks from ${file}"
              rm -f "$tmp_file"
              return 1
          }
          ;;
      *)
          printStyled error "Unknown key for Brewfile: ${key}"
          rm -f "$tmp_file"
          return 1
          ;;
  esac

  mv "${tmp_file}" "${file}" || {
    printStyled error "Failed to overwrite ${file}"
    rm -f "$tmp_file"
    return 1
  }
}

# PRIVATE - Add value to a list into a Brewfile (append line if not already present)
# _brew_add <file> <key> <value>
_brew_add() {
  local file="${1}"
  local key="${2}"
  local value="${3}"
  local line=""

  case "${key}" in
    formulae)
      line="brew \"${value}\""
      ;;
    casks)
      line="cask \"${value}\""
      ;;
    *)
      printStyled error "Unknown key for brewfile: '${key}'"
      return 1
      ;;
  esac

  if ! grep -qF "${line}" "${file}"; then
    # Ensure newline at EOF before appending
    [[ $(tail -c1 "${file}") != "" ]] && echo >> "${file}"

    # Append value
    echo "${line}" >> "${file}" || {
      printStyled error "Failed to append line to ${file}"
      return 1
    }
  fi
}

# PRIVATE - Remove value from a list into a Brewfile
# _brew_rm <file> <key> <value>
_brew_rm() {
  local file=$1
  local key=$2
  local value=$3

  local pattern=""
  case "${key}" in
    formulae)
      pattern="^brew \"${value}\""
      ;;
    casks)
      pattern="^cask \"${value}\""
      ;;
    *)
      printStyled error "Unknown key for brewfile: '${key}'"
      return 1
      ;;
  esac

  grep -v "${pattern}" "$file" > "${file}.tmp" || {
    printStyled error "Failed to remove line from ${file}"
    return 1
  }

  mv "${file}.tmp" "${file}" || {
    printStyled error "Failed to overwrite ${file} after removal"
    return 1
  }
}

#!/usr/bin/env zsh
###############################
# FICHIER /src/helpers/time.zsh
###############################

# ────────────────────────────────────────────────────────────────
# PUBLIC
# ────────────────────────────────────────────────────────────────

# Returns current timestamp
time_get_current() {
    local current_ts
    if ! current_ts="$(gdate +%s)"; then
        printStyled error "Failed to get current timestamp"
        return 1
    fi
    echo "${current_ts}"
}

# Add a number of days to a timestamp and return result as timestamp
time_add_days() {

    # Variables
    local start_ts="$1"
    local add="$2"

    # Arguments checks
    if [[ -z "${start_ts}" || -z "${add}" ]]; then
        printStyled error "Expected : <start_ts> <add> (received : ${1} ${2})"
        return 1
    fi
    if ! [[ "${start_ts}" =~ ^[0-9]+$ && "${add}" =~ ^[0-9]+$ ]]; then
        printStyled error "Both arguments must be positive integers"
        return 1
    fi

    # Dependency check
    if ! command -v gdate >/dev/null 2>&1; then
        printStyled error "Missing dependency: gdate (from coreutils)"
        return 1
    fi

    # Compute
    echo $((86400 * $add + $start_ts))
}

# Convert UNIX timestamp to YYYY-MM-DD
time_to_human() {
    local ts="$1"
    if [[ -z "$ts" || ! "$ts" =~ ^[0-9]+$ ]]; then
        printStyled error "Expected a timestamp (received: ${1})"
        return 1
    fi

    if ! gdate -d "@$ts" "+%Y-%m-%d"; then
        printStyled error "Conversion failed"
        return 1
    fi
}

# Convert YYYY-MM-DD to UNIX timestamp
time_from_human() {
    local date_str="${1}"

    # Check format
    if [[ -z "${date_str}" || ! "${date_str}" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
        printStyled error "Expected format: YYYY-MM-DD (received: ${1})"
        return 1
    fi

    # Dependency check
    if ! command -v gdate >/dev/null 2>&1; then
        printStyled error "Missing dependency: gdate (from coreutils)"
        return 1
    fi

    # Convert
    if ! gdate -d "${date_str}" +%s; then
        printStyled error "Conversion failed"
        return 1
    fi
}

#!/usr/bin/env zsh
###############################
# FICHIER /src/logic/modules.zsh
###############################

# TODO: If cycle conflict → Ask user to choose ([1] file_1 → file_2 || [2] file_2 → file_1 || [3] Only file_1 || [4] Only file_2 || [5] Cancel both)
#   |-> Reorganise MODULES global var content to be same oredered as resolved conflicts (and remove canceled modules)

# Github repo containing all available modules
MODULES_LIB="https://raw.githubusercontent.com/guillaumeast/gacli-hub/refs/heads/master/modules"

# Modules signature
ENTRY_POINT="main.zsh"
CONFIG_FILE="tools.json"

# Active modules and commands
MODULES_INSTALLED=()
MODULES_ACTIV=()

# ────────────────────────────────────────────────────────────────
# DOWNLOAD FILES
# ────────────────────────────────────────────────────────────────

# PUBLIC - Download and merge all modules
modules_init() {
    local modules_raw=()
    local modules_to_check=()
    local merged_formulae=()
    local merged_casks=()

    # Reset merged file
    file_reset "${FILE_TOOLS_MODULES}" formulae || return 1
    file_reset "${FILE_TOOLS_MODULES}" casks || return 1

    # Get modules list from $DIR_MODS
    setopt local_options nullglob # Avoid errors when DIR_MODS is empty
    local folders=("${DIR_MODS}"/*(/))
    if [[ ${#folders[@]} -gt 0 ]]; then
        local module_path
        for module_path in "${folders[@]}"; do
            modules_to_check+=("${module_path##*/}")
        done
    fi

    # Get modules list from $FILE_TOOLS_USER
    modules_raw+=("${(@f)$(file_read "${FILE_TOOLS_USER}" modules)}") || return 1

    if [[ ${#modules_raw[@]} -gt 0 ]]; then
        for module in "${modules_raw[@]}"; do
            [[ -z "$module" ]] && continue
            modules_to_check+=("${module}")
        done
    fi

    # Modules are optional
    [[ ${#modules_to_check[@]} = 0 ]] && return 0

    # Download modules
    for module in "${modules_to_check[@]}"; do
        # Download module and nested modules
        _module_download "${module}" || continue

        # Merge dependencies
        merged_formulae+=("${(@f)$(file_read "${DIR_MODS}/${module}/${CONFIG_FILE}" formulae)}") || continue
        merged_casks+=("${(@f)$(file_read "${DIR_MODS}/${module}/${CONFIG_FILE}" casks)}") || continue
    done

    # Save merged dependencies
    file_add "${FILE_TOOLS_MODULES}" formulae "${merged_formulae[@]}" || {
        printStyled error "Unable to merge modules dependencies"
        return 1
    }
    file_add "${FILE_TOOLS_MODULES}" casks "${merged_casks[@]}"|| {
        printStyled error "Unable to merge modules dependencies"
        return 1
    }
}

# PRIVATE - Download and extract a module (recursively)
_module_download() {
    local module="${1}"
    local config=""
    local nested_modules=()

    # Download module if needed
    if ! _module_is_downloaded "${module}"; then
        local descriptor_url="${MODULES_LIB}/${module}.json"
        local tmp_descriptor="${TMP_DIR}/${module}.json"
        local module_url=""

        # Download descriptor file (abstract curl / get handling into a /.helpers/http.zsh file)
        curl "${descriptor_url}" > "${tmp_descriptor}" || {
            printStyled error "Unable to download descriptor"
            printStyled error "→ url: ${descriptor_url}"
            rm -f "$tmp_descriptor"
            return 1
        }

        # Get archive url
        module_url=$(file_read "${tmp_descriptor}" module_url) || {
            printStyled error "Unable to parse descriptor"
            rm -f "${tmp_descriptor}"
            return 1
        }
        rm -f "${tmp_descriptor}"

        # Download module archive
        local tmp_archive="$(mktemp)"
        if ! curl -sL "${module_url}" --output "${tmp_archive}"; then
            printStyled error "Unable to download module archive"
            printStyled error "→ url: ${module_url}"
            rm -f "$tmp_archive"
            return 1
        fi

        # Create target directory
        mkdir -p "${DIR_MODS}/${module}" || {
            printStyled error "Failed to create module directory: ${DIR_MODS}/${module}"
            rm -f "$tmp_archive"
            return 1
        }

        # Extract archive to module directory
        if ! tar -xzf "$tmp_archive" -C "${DIR_MODS}/${module}"; then
            printStyled error "Failed to extract archive: ${tmp_archive}"
            rm -f "$tmp_archive"
            return 1
        fi

        # Cleanup
        rm -f "$tmp_archive"

        # Check integrity
        _module_is_downloaded "${module}" || {
            printStyled error "Unable to recognize module: ${module}"
            return 1
        }
    fi

    # Download nested modules (recursive)
    config="${DIR_MODS}/${module}/${CONFIG_FILE}"
    nested_modules+=("${(@f)$(file_read "${config}" modules)}")
    for nested_module in "${nested_modules[@]}"; do
        _module_download "${nested_module}" || {
            printStyled error "Unable to download nested module: ${nested_module}"
            return 1
        }
    done

    # Add to installed modules variable
    MODULES_INSTALLED+=("${module}")
}

# PRIVATE - Check if a module is correctly installed
_module_is_downloaded() {

    # Resolve paths
    local module="${1}"
    local module_path="${DIR_MODS}/${module}"
    local entry_point="${module_path}/${ENTRY_POINT}"
    local config_file="${module_path}/${CONFIG_FILE}"

    # Check signatures
    [[ -d "${module_path}" ]] || return 1
    [[ -f "${entry_point}" ]] || return 1
    [[ -f "${config_file}" ]] || return 1
}

# ────────────────────────────────────────────────────────────────
# SOURCE CODE
# ────────────────────────────────────────────────────────────────

# PUBLIC - Source installed modules and activate their commands
modules_load() {

    local module
    for module in "${MODULES_INSTALLED[@]}"; do
        source "${module}" || {
            printStyled warning "Unable to load module: ${module}"
            continue
        }
        _module_get_commands "${module}" || {
            printStyled warning "Unable to fetch module commands: ${module}"
            continue
        }
        MODULES_ACTIV+=("${module}")
    done
}

# PRIVATE - Extract dynamic commands from a module via get_commands
_module_get_commands() {
    local file="$1"

    # Argument check
    if [[ -z "$file" ]]; then
        printStyled error "Expected : <file> (received : $1)"
        return 1
    fi

    # get_commands is optional
    if ! typeset -f get_commands >/dev/null; then
        return 0
    fi

    # Capture and validate output
    local raw_output
    if ! raw_output="$(get_commands)"; then
        printStyled error "get_commands failed in ${file}"
        return 1
    fi

    local cmd
    for cmd in ${(f)raw_output}; do
        if [[ "$cmd" != *=* ]]; then
            printStyled warning "Invalid command format: '$cmd' in ${file}"
            printStyled highlight "Expected : 'command=function'"
            continue
        fi
        COMMANDS_MODS+=("$cmd")
    done

    unfunction get_commands
}

#!/usr/bin/env zsh
###############################
# FICHIER /src/logic/uninstall.zsh
###############################

# TODO: make it independent (no need of gacli.zsh or other script to run)
# TODO: make it 100% POSIX → .sh

# Uninstall GACLI: remove all file and cleanup .zshrc
gacli_uninstall() {
    printStyled info "Uninstalling... ⏳"

    # Variables
    local zshrc_file="$HOME/.zshrc"
    local config_file="${CONFIG}"

    # Remove GACLI lines from .zshrc
    print ""
    printStyled info "Updating .zshrc file... ⏳"
    if [[ -f "${zshrc_file}" ]]; then
        cp "${zshrc_file}" "${zshrc_file}.bak" || {
            printStyled error "Failed to backup zshrc file"
            return 1
        }

        # Remove all GACLI lines (header + source + alias)
        grep -vE '^# GACLI$|^export PATH="\$HOME/.local/bin:\$PATH"$|^source "\$HOME/.gacli/gacli.zsh"$' "${zshrc_file}" > "${zshrc_file}.tmp" || {
            printStyled error "Failed to parse zshrc file"
            return 1
        }


        mv "${zshrc_file}.tmp" "$zshrc_file" || {
            printStyled error "Failed to update zshrc file"
            return 1
        }

    else
        printStyled warning ".zshrc file not found ($zshrc_file)"
    fi
    printStyled success "Updated"

    # Remove GACLI wrapper
    print ""
    printStyled info "Removing wrapper... ⏳"
    local wrapper_path="${HOME}/.local/bin/gacli"
    if [[ -f "${wrapper_path}" ]]; then
        rm -f "${wrapper_path}" || {
            printStyled warning "Failed to delete wrapper ${wrapper_path}"
        }
    fi
    printStyled success "Removed"

    # Delete GACLI directory
    print ""
    printStyled info "Deleting GACLI files... ⏳"
    if [[ -d "${GACLI_DIR}" ]]; then
        rm -rf "${GACLI_DIR}" || {
            printStyled error "Failed to delete directory ${GACLI_DIR}"
            return 1
        }
    else
        printStyled error "Unable to find GACLI directory: ${GACLI_DIR}"
        return 1
    fi
    printStyled success "Deleted"

    print ""
    printStyled success "Uninstall complete ✅"
    print ""
    printStyled highlight "Restart your terminal"
    print ""
}

#!/usr/bin/env zsh
###############################
# FICHIER /src/logic/update.zsh
###############################

TODAY=""

# Config
INITIALIZED=""
AUTO_UPDATE=""
FREQ_DAYS=""
LAST_UPDATE=""
NEXT_UPDATE=""

# ────────────────────────────────────────────────────────────────
# AUTO-UPDATE
# ────────────────────────────────────────────────────────────────

# PUBLIC - Initialize config process and trigger auto-update if needed
update_init() {
    local tmp_brewfile="${DIR_TMP}/Brewfile"

    # Get config values
    _update_get_config || {
        printStyled error "Unable to load config"
        return 1
    }

    # Merge dependencies
    update_merge_into "${tmp_brewfile}" || {
        printStyled error "Unable to merge dependencies"
        rm -f "${tmp_brewfile}"
        return 1
    }

    # Run update if needed
    if [[ $(_update_is_reached) || $(_update_is_required "${tmp_brewfile}") ]]; then
        _update_run "${tmp_brewfile}" || printStyled warning "Unable to run update"
    fi

    # Delete temporary Brewfile
    rm -f "${tmp_brewfile}"
}

# PRIVATE - Check if the scheduled auto-update date is reached
_update_is_reached() {

    # Check if auto update is enabled
    [[ "${AUTO_UPDATE}" = "false" ]] && return 1

    # Check if next_update is defined
    if [[ -z "$NEXT_UPDATE" || ! "$NEXT_UPDATE" =~ ^[0-9]+$ ]]; then
        printStyled warning "Unable to parse next update date: '${NEXT_UPDATE}' \n    └→ Auto-update disabled"
        AUTO_UPDATE="false" && NEXT_UPDATE=""
        _update_set_config
        return 1
    fi

    # Check if next_update is reached
    if (( TODAY < NEXT_UPDATE )); then
        return 1
    fi
}

# PRIVATE - Check if any required dependency is missing in the system
_update_is_required() {
    local brewfile="${1}"
    local dependencies=()
    local dependencie=""

    # Check if formulae are missing
    dependencies=("${(@f)$(file_read "${brewfile}" formulae)}")
    for dependencie in "${dependencies[@]}"; do
        brew_is_f_active "${dependencie}" || return 0
    done

    # Check if casks are missing
    dependencies=("${(@f)$(file_read "${brewfile}" casks)}")
    for dependencie in "${dependencies[@]}"; do
        brew_is_c_active "${dependencie}" || return 0
    done

    return 1
}

# ────────────────────────────────────────────────────────────────
# MANUAL UPDATE
# ────────────────────────────────────────────────────────────────

# PRIVATE - Run manual update by merging and applying all dependencies
_update_manual() {
    local tmp_brewfile="${DIR_TMP}/Brewfile"

    # Merge all dependencies
    update_merge_into "${tmp_brewfile}" || {
        printStyled error "Unable to merge dependencies"
        rm -f "${tmp_brewfile}"
        return 1
    }

    _update_run "${tmp_brewfile}" || {
        printStyled error "Update failed"
        rm -f "${tmp_brewfile}"
        return 1
    }
}

# PUBLIC - Generate temporary merged Brewfile with all dependencies (core + modules + user)
update_merge_into() {
    local output_brewfile="${1}"
    local formulae=()
    local casks=()

    # Download missing modules and merge modules dependencies
    modules_init || {
        printStyled error "Unable to init modules"
        return 1
    }

    # Create output file if missing
    touch "${output_brewfile}" || {
        printStyled error "Unable to create merged Brewfile: ${output_brewfile}"
        return 1
    }

    for descriptor in "${FILES_TOOLS[@]}"; do

        # Formulae
        formulae=("${(@f)$(file_read "${descriptor}" formulae)}") || return 1
        for formula in "${formulae[@]}"; do
            [[ -z "${formula}" ]] && continue
            file_add "${output_brewfile}" formulae "${formula}" || {
                printStyled warning "Unable to write formula: ${formula}"
            }
        done

        # Casks
        casks=("${(@f)$(file_read "${descriptor}" casks)}") || return 1
        for cask in "${casks[@]}"; do
            [[ -z "${cask}" ]] && continue
            file_add "${output_brewfile}" casks "${cask}" || {
                printStyled warning "Unable to write cask: ${cask}"
            }
        done
    done
}

# PRIVATE - Execute the update process and save new status in config file
_update_run() {
    local brewfile="${1}"
    # Update Homebrew, formulae and casks (Implemented in `gacli/modules/.core/brew.zsh`)
    brew_bundle "${brewfile}" || return 1

    # Update variables
    LAST_UPDATE="${TODAY}"
    if [[ $AUTO_UPDATE = true ]]; then
        if ! NEXT_UPDATE="$(time_add_days "${LAST_UPDATE}" "${FREQ_DAYS}")"; then
            printStyled warning "Failed to compute next update date"
            printStyled warning "Auto-update disabled"
            AUTO_UPDATE=false
            NEXT_UPDATE=""
        fi
    fi

    # Save
    _update_set_config

    # Update 

    # Display result
    printStyled success "Updated 🚀"
    _update_display_next
}

# ────────────────────────────────────────────────────────────────
# CONFIG MANAGEMENT
# ────────────────────────────────────────────────────────────────

# PRIVATE - Load auto-update config from config file or trigger config file initialization
_update_get_config() {

    # Read values from config file
    INITIALIZED="$(file_read "${FILE_CONFIG_UPDATE}" "initialized")" || return 1
    AUTO_UPDATE="$(file_read "${FILE_CONFIG_UPDATE}" "auto_update")" || return 1
    LAST_UPDATE="$(file_read "${FILE_CONFIG_UPDATE}" "last_update")" || return 1
    FREQ_DAYS="$(file_read "${FILE_CONFIG_UPDATE}" "freq_days")" || return 1
    NEXT_UPDATE="$(file_read "${FILE_CONFIG_UPDATE}" "next_update")" || return 1

    # Get current date
    TODAY="$(time_get_current)" || return 1

    # Init config at first launch
    if [[ $INITIALIZED != "true" ]]; then
        update_edit_config || return 1
        return 0
    fi
}

# PUBLIC - Configure auto-update settings based on user input
update_edit_config() {

    # Ask for auto-update frequency
    _update_ask_freq || return 1

    # Setup auto-update
    if [[ $FREQ_DAYS = 0 || -z $FREQ_DAYS ]]; then
        AUTO_UPDATE="false"
        NEXT_UPDATE=""
    else
        if ! NEXT_UPDATE="$(time_add_days "${TODAY}" "${FREQ_DAYS}")"; then
            printStyled warning "Failed to compute next update date"
            printStyled warning "Auto-update disabled"
            AUTO_UPDATE=false
            NEXT_UPDATE=""
        else
            AUTO_UPDATE="true"
        fi
    fi

    # Save
    INITIALIZED="true"
    _update_set_config || return 1
    _update_display_next
    echo ""
}

# PRIVATE - Save current update config values to config file
_update_set_config() {

    file_write "${FILE_CONFIG_UPDATE}" "initialized" "${INITIALIZED}" || return 1
    file_write "${FILE_CONFIG_UPDATE}" "auto_update" "${AUTO_UPDATE}" || return 1
    file_write "${FILE_CONFIG_UPDATE}" "last_update" "${LAST_UPDATE}" || return 1
    file_write "${FILE_CONFIG_UPDATE}" "freq_days" "${FREQ_DAYS}" || return 1
    file_write "${FILE_CONFIG_UPDATE}" "next_update" "${NEXT_UPDATE}" || return 1
}

# ────────────────────────────────────────────────────────────────
# I/O
# ────────────────────────────────────────────────────────────────

# PRIVATE - Ask user for auto-update frequency (type safe)
_update_ask_freq() {

    while true; do
        echo ""
        print -n "👉 ${BOLD}How many days between each auto-update? (OFF = 0) ${NONE}"
        read -r FREQ_DAYS

        # Check format
        if [[ "$FREQ_DAYS" =~ ^[0-9]+$ ]]; then
            break
        else
            printStyled "error" "⛔ Invalid input. Please enter a number\n"
        fi
    done
}

# PRIVATE - Display the next scheduled auto-update date or status
_update_display_next() {
    # Display next update date
    if [[ $AUTO_UPDATE = true ]]; then
        printStyled info "Next update on: $(time_to_human "${NEXT_UPDATE}")"
    else
        printStyled info "Auto updates disabled"
    fi
}

#!/usr/bin/env zsh
###############################
# FICHIER /src/main.zsh
###############################

# Easter egg display
if [[ $1 == "" ]]; then
    print "\033[90m✧ Don't panic... 🐥\033[0m"
fi

# Env
setopt extended_glob
IS_MACOS=false
IS_LINUX=false

# Check $HOME is set
if [ -z "${HOME}" ] || [ ! -d "${HOME}" ]; then
    echo " ---> [GACLI] E1: fatal error, exiting GACLI <---" >&2
    exit "1"
fi

# Directories
DIR_ROOT="${HOME}/.gacli"
DIR_DATA="${DIR_ROOT}/data"
DIR_CONFIG="${DIR_DATA}/config"
DIR_TOOLS="${DIR_DATA}/tools"
DIR_HELPERS="${DIR_ROOT}/helpers"
DIR_LOGIC="${DIR_ROOT}/logic"
DIR_MODS="${DIR_ROOT}/modules"
DIR_TMP="${DIR_ROOT}/.tmp"
DIRS=("${DIR_ROOT}" "${DIR_DATA}" "${DIR_CONFIG}" "${DIR_TOOLS}" "${DIR_HELPERS}" "${DIR_LOGIC}" "${DIR_MODS}" "${DIR_TMP}")

# Config files
FILE_CONFIG_UPDATE="${DIR_CONFIG}/update.config.json"
FILES_CONFIG=("${FILE_CONFIG_UPDATE}")

# Tools files
FILE_TOOLS_CORE="${DIR_TOOLS}/core.tools.json"
FILE_TOOLS_MODULES="${DIR_TOOLS}/modules.tools.json"
FILE_TOOLS_USER="${DIR_TOOLS}/user.tools.json"
FILES_TOOLS=("${FILE_TOOLS_CORE}" "${FILE_TOOLS_MODULES}" "${FILE_TOOLS_USER}")

# Scripts files
SCRIPTS=( \
    "${DIR_ROOT}/helpers/time.zsh" \
    "${DIR_ROOT}/helpers/parser.zsh" \
    "${DIR_ROOT}/helpers/brew.zsh" \
    "${DIR_ROOT}/logic/modules.zsh" \
    "${DIR_ROOT}/logic/update.zsh" \
    "${DIR_ROOT}/logic/uninstall.zsh" \
)

# Available commands
COMMANDS_CORE=("help=help" "config=update_edit_config" "update=update_manual" "uninstall=gacli_uninstall")
COMMANDS_MODS=()

# Formatting
BOLD="\033[1m"
UNDERLINE="\033[4m"
BLACK='\033[30m'
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'
PURPLE='\033[35m'
CYAN='\033[36m'
ORANGE='\033[38;5;208m'
GREY='\033[90m'
NONE='\033[0m'
COLOR_FORMULAE="${BLUE}"
COLOR_CASKS="${CYAN}"
COLOR_MODS="${PURPLE}"
COLOR_COMMANDS="${ORANGE}"

# Emojis
EMOJI_SUCCESS="✦"
EMOJI_WARN="⚠️"
EMOJI_ERR="❌"
EMOJI_INFO="✧"
EMOJI_HIGHLIGHT="👉"
EMOJI_DEBUG="🔎"
EMOJI_WAIT="⏳"
ICON_ON="⊙"
ICON_OFF="○"

# ────────────────────────────────────────────────────────────────
# MAIN
# ────────────────────────────────────────────────────────────────

# Main function
main() {
    # Check env compatibility and files integrity
    _gacli_check_system || abort "1" || return 1
    _gacli_check_files || abort "2" || return 1

    # Load core scripts
    local script
    for script in "${SCRIPTS[@]}"; do
        if ! source "${script}"; then
            printStyled error "Unable to load required script: ${script}"
            abort "3" || return 1
        fi
    done

    # Load modules and check if update is due (date or new dependencies)
    modules_init || abort "4" || return 1           # Implemented in modules.zsh
    update_init || abort "5" || return 1            # Implemented in update.zsh
    modules_load || abort "6" || return 1           # Implemented in modules.zsh

    # Dispatch commands
    _gacli_dispatch "$@" || abort "7" || return 1
}

# ────────────────────────────────────────────────────────────────
# CORE LOGIC
# ────────────────────────────────────────────────────────────────

# PRIVATE - Detect the operating system and set the corresponding flags
_gacli_check_system() {
    if [[ -z "$OSTYPE" ]]; then
        printStyled error "\$OSTYPE is not set" >&2
        return 1
    fi

    case "$OSTYPE" in
        darwin*) IS_MACOS=true ;;
        linux*)  IS_LINUX=true ;;
        *)
            printStyled error "Unknown OS type: $OSTYPE" >&2
            return 1
            ;;
    esac
}

# PRIVATE - Check files integrity
_gacli_check_files() {
    local dir file
    local files=("${FILES_CONFIG[@]}" "${FILES_TOOLS[@]}")

    # Check directories integrity
    for dir in "${DIRS[@]}"; do
        mkdir -p "${dir}" || {
            printStyled error "Unable to resolve dir: ${dir}"
            return 1
        }
    done

    # Check files integrity
    for file in "${files[@]}"; do
        touch "${file}" || {
            printStyled error "Unable to resolve file: ${file}"
            return 1
        }
    done
}

# PRIVATE - Dispatch commands
_gacli_dispatch() {
    case "$1" in
        "")
            style_ascii_logo
            print_formulae
            print_casks
            print_modules
            print_core_commands
            print_mods_commands
            echo ""
            ;;
        *)
            # Dynamic commands (declared via get_commands in modules)
            local commands=("${COMMANDS_CORE[@]}" "${COMMANDS_MODS[@]}")
            for cmd in "${commands[@]}"; do
                local command_name="${cmd%%=*}"
                local function_name="${cmd#*=}"

                if [[ "$1" == "$command_name" ]]; then
                    # Call matched function with remaining args
                    "${function_name}" "${@:2}"
                    return "$?"
                fi
            done

            # No command matched
            printStyled error "Unknown command '$1'" >&2
            modules_print_commands
            return 1
            ;;
    esac
}

# PUBLIC - Display a fatal error message and exit the script
abort() {
    echo ""
    echo "-------------------------------------------------------"
    echo " ---> [GACLI] E${1}: fatal error, exiting GACLI <---" >&2
    echo "-------------------------------------------------------"
    echo ""
    return 1
}

# ────────────────────────────────────────────────────────────────
# OUTPUTS
# ────────────────────────────────────────────────────────────────

# PUBLIC - ASCII art logo
style_ascii_logo() {
    print "${ORANGE}  _____          _____ _      _____ ${NONE}"
    print "${ORANGE} / ____|   /\\\\   / ____| |    |_   _|${NONE}"
    print "${ORANGE}| |  __   /  \\\\ | |    | |      | |  ${NONE}"
    print "${ORANGE}| | |_ | / /\\\\ \\\\| |    | |      | |  ${NONE}"
    print "${ORANGE}| |__| |/ ____ \\\\ |____| |____ _| |_ ${NONE}"
    print "${ORANGE} \\\\_____/_/    \\\\_\\\\_____|______|_____|${NONE}"
    print ""
}

# PUBLIC - Display formatted message
printStyled() {
    # Variables
    local style=$1
    local raw_message=$2
    local final_message=""
    local color=$NONE

    # Argument check
    if [[ -z "$style" || -z "$raw_message" ]]; then
        echo "❌ [printStyled] Expected: <style> <message>"
        return 1
    fi

    # Formatting
    case "$style" in
        error)
            echo "${RED}${BOLD}${EMOJI_ERR} ${GREY}${funcstack[4]}${GREY} → ${GREY}${funcstack[3]}${GREY} → ${RED}${funcstack[2]}${GREY}\n    ${RED}└→ ${raw_message}${NONE}" >&2
            return
            ;;
        warning)
            print "${YELLOW}${BOLD}${EMOJI_WARN}  ${GREY}${funcstack[4]}${GREY} → ${GREY}${funcstack[3]}${GREY} → ${ORANGE}${funcstack[2]}${GREY}\n    ${ORANGE}└→ ${raw_message}${NONE}" >&2
            return
            ;;
        success)
            color=$GREEN
            final_message="${EMOJI_SUCCESS} ${raw_message}"
            ;;
        info)
            color=$GREY
            final_message="${EMOJI_INFO} ${raw_message}"
            ;;
        highlight)
            color=$NONE
            final_message="${EMOJI_HIGHLIGHT} ${raw_message}"
            ;;
        debug)
            color=$YELLOW
            final_message="${EMOJI_DEBUG} ${GREY}${funcstack[4]}${GREY} → ${GREY}${funcstack[3]}${GREY} → ${YELLOW}${funcstack[2]}${GREY}\n    ${YELLOW}└→ ${BOLD}${raw_message}${NONE}"
            ;;
        *)
            color=$NONE
            final_message="${raw_message}"
            ;;
    esac

    # Display
    print "${color}$final_message${NONE}"
}

# PUBLIC - Diplay tips
help() {
    print ""
    printStyled highlight "${COLOR_FORMULAE}Formulaes${GREY} → https://formulae.brew.sh/formula ${NONE}"
    print_formulae

    print ""
    printStyled highlight "${COLOR_CASKS}Casks${GREY} → https://formulae.brew.sh/cask/ ${NONE}"
    print_casks

    print ""
    printStyled highlight "${COLOR_MODS}Modules${GREY} → https://github.com/guillaumeast/gacli ${NONE}"
    print_modules

    print ""
    printStyled highlight "${COLOR_COMMANDS}Core commands${GREY}"
    print_core_commands

    print ""
    printStyled highlight "${COLOR_COMMANDS}Modules commands${GREY}"
    print_mods_commands
    print ""
}

# PUBLIC - Print installed status for all formulae defined in tools descriptors
print_formulae() {
    local tmp_brewfile="${DIR_TMP}/Brewfile"
    local formula
    local output

    # Get merged casks
    update_merge_into "${tmp_brewfile}" || {
        rm -f "${tmp_brewfile}"
        return 1
    }
    
    formulae+=("${(@f)$(file_read "${tmp_brewfile}" formulae)}") || {
        rm -f "${tmp_brewfile}"
        return 1
    }

    # Compute
    for formula in "${formulae[@]}"; do
        local icon="${GREY}${ICON_OFF}${NONE}"
        brew_is_f_active "${formula}" && icon="${GREEN}${ICON_ON}${NONE}"
        output+="${icon} ${COLOR_FORMULAE}$formula ${GREY}|${NONE} "
    done

    # Display (removing trailing " | ")
    print "${output% ${GREY}|${NONE} }"

    # Delete temporary Brewfile
    rm -f "${tmp_brewfile}"
}

# PUBLIC - Print installed status for all casks defined in tools descriptors
print_casks() {
    local tmp_brewfile="${DIR_TMP}/Brewfile"
    local casks=()
    local cask=""
    local output=""

    # Get merged casks
    update_merge_into "${tmp_brewfile}" || {
        rm -f "${tmp_brewfile}"
        return 1
    }
    casks=("${(@f)$(file_read "${tmp_brewfile}" casks)}") || {
        rm -f "${tmp_brewfile}"
        return 1
    }

    # Compute
    for cask in "${casks[@]}"; do
        local icon="${GREY}${ICON_OFF}${NONE}"
        brew_is_c_active "${cask}" && icon="${GREEN}${ICON_ON}${NONE}"
        output+="${icon} ${COLOR_CASKS}$cask ${GREY}|${NONE} "
    done

    # Display (removing trailing " | ")
    [[ -n "${output}" ]] && print "${output% ${GREY}|${NONE} }"

    # Delete temporary Brewfile
    rm -f "${tmp_brewfile}"
}

# PUBLIC - Print installed status for all installed modules
print_modules() {
    local output=""
    local icon

    for module in "${MODULES_INSTALLED[@]}"; do
        icon="${GREY}${ICON_OFF}${NONE}"
        [[ " $MODULES_ACTIV " == *" $module "* ]] && icon="${GREEN}${ICON_ON}${NONE}"
        output+="${icon} ${COLOR_MODS}${module}${NONE} ${GREY}|${NONE} "
    done
    
    # Display (removing trailing " | ")
    [[ -n "${output}" ]] && print "${output% ${GREY}|${NONE} }"
}

# PUBLIC - Print available built-in GACLI core commands
print_core_commands() {
    local output

    for cmd in "${COMMANDS_CORE[@]}"; do
        local command_name="${cmd%%=*}"
        output+="${GREEN}${ICON_ON} ${COLOR_COMMANDS}${command_name} ${GREY}|${NONE} "
    done
    print "${output% ${GREY}|${NONE} }"
}

# PUBLIC - Print available commands provided by loaded modules
print_mods_commands() {
    local output

    for cmd in "${COMMANDS_MODS[@]}"; do
        local command_name="${cmd%%=*}"
        output+="${GREEN}${ICON_ON} ${COLOR_COMMANDS}${command_name} ${GREY}|${NONE} "
    done
    [[ -n "${output}" ]] && print "${output% ${GREY}|${NONE} }"
}

# ────────────────────────────────────────────────────────────────
# RUN
# ────────────────────────────────────────────────────────────────

# Call main with all command args
main "$@"

#!/usr/bin/env zsh
###############################
# FICHIER /tests/setup.zunit
###############################

DIR_CURRENT="$(dirname "${(%):-%N}")"
DIR_ROOT="${DIR_CURRENT}/.."
DIR_SRC="${DIR_ROOT}/src"
DIR_TESTS="${DIR_ROOT}/tests"

# ────────────────────────────────────────────────────────────────
# I/O formatting (from main.zsh)
# ────────────────────────────────────────────────────────────────

# Formatting
BOLD="\033[1m"
UNDERLINE="\033[4m"
BLACK='\033[30m'
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'
PURPLE='\033[35m'
CYAN='\033[36m'
ORANGE='\033[38;5;208m'
GREY='\033[90m'
NONE='\033[0m'
COLOR_FORMULAE="${BLUE}"
COLOR_CASKS="${CYAN}"
COLOR_MODS="${PURPLE}"
COLOR_COMMANDS="${ORANGE}"

# Emojis
EMOJI_SUCCESS="✦"
EMOJI_WARN="⚠️"
EMOJI_ERR="❌"
EMOJI_INFO="✧"
EMOJI_HIGHLIGHT="👉"
EMOJI_DEBUG="🔎"
EMOJI_WAIT="⏳"
ICON_ON="⊙"
ICON_OFF="○"

printStyled() {
    # Variables
    local style=$1
    local raw_message=$2
    local final_message=""
    local color=$NONE

    # Argument check
    if [[ -z "$style" || -z "$raw_message" ]]; then
        echo "❌ [printStyled] Expected: <style> <message>"
        return 1
    fi

    # Formatting
    case "$style" in
        error)
            echo "${RED}${BOLD}${EMOJI_ERR} ${GREY}${funcstack[4]}${GREY} → ${GREY}${funcstack[3]}${GREY} → ${RED}${funcstack[2]}${GREY}\n    ${RED}└→ ${raw_message}${NONE}" >&2
            return
            ;;
        warning)
            print "${YELLOW}${BOLD}${EMOJI_WARN}  ${GREY}${funcstack[4]}${GREY} → ${GREY}${funcstack[3]}${GREY} → ${ORANGE}${funcstack[2]}${GREY}\n    ${ORANGE}└→ ${raw_message}${NONE}" >&2
            return
            ;;
        success)
            color=$GREEN
            final_message="${EMOJI_SUCCESS} ${raw_message}"
            ;;
        info)
            color=$GREY
            final_message="${EMOJI_INFO} ${raw_message}"
            ;;
        highlight)
            color=$NONE
            final_message="${EMOJI_HIGHLIGHT} ${raw_message}"
            ;;
        debug)
            color=$YELLOW
            final_message="${EMOJI_DEBUG} ${GREY}${funcstack[4]}${GREY} → ${GREY}${funcstack[3]}${GREY} → ${YELLOW}${funcstack[2]}${GREY}\n    ${YELLOW}└→ ${BOLD}${raw_message}${NONE}"
            ;;
        *)
            color=$NONE
            final_message="${raw_message}"
            ;;
    esac

    # Display
    print "${color}$final_message${NONE}"
}

#!/usr/bin/env zunit
###############################
# FICHIER /tests/unit/helpers/parser/parser.zunit
###############################

@setup {

    # Setup env
    dir_current="$(dirname "${(%):-%N}")"
    load "${dir_current}/../../../setup.zsh"
    load "${DIR_SRC}/helpers/parser.zsh"

    # TODO: fix dynamic paths

    # Fixtures
    FIXTURE_JSON="/Users/gui/Repos/gacli/gacli/tests/unit/helpers/parser/fixture.json"
    FIXTURE_BREW="/Users/gui/Repos/gacli/gacli/tests/unit/helpers/parser/Brewfile"
    EMPTY_BREW="/Users/gui/Repos/gacli/gacli/tests/unit/helpers/parser/empty.Brewfile"

    # Output files
    F_JSON_OUT="/Users/gui/Repos/gacli/gacli/tests/unit/helpers/parser/output/output.json"
    F_BREW_OUT="/Users/gui/Repos/gacli/gacli/tests/unit/helpers/parser/output/Brewfile"

    # Reset output files
    mkdir -p "/Users/gui/Repos/gacli/gacli/tests/unit/helpers/parser/output"
    cp "${FIXTURE_JSON}" "${F_JSON_OUT}"
    cp "${FIXTURE_BREW}" "${F_BREW_OUT}"
}

# ────────────────────────────────────────────────────────────────
# JSON PARSER
# ────────────────────────────────────────────────────────────────

@test 'JSON - read scalar       0 value' {
    run file_read "${FIXTURE_JSON}" scalar_empty
    assert $state equals 0
    assert "$output" is_empty
}

@test 'JSON - read scalar       1 value' {
    run file_read "${FIXTURE_JSON}" scalar_value
    assert $state equals 0
    assert "$output" same_as 'old value 1'
}

@test 'JSON - read list         0 value' {
    run file_read "${FIXTURE_JSON}" list_0
    assert $state equals 0
    assert "$output" is_empty
}

@test 'JSON - read list         2 values' {
    run file_read "${FIXTURE_JSON}" list_2
    assert $state equals 0
    assert "$output" same_as '"old value 1" "old value 2"'
}

# Now we assume that file_read is working as expected
# So we'll check further writing functions by reading the output file with file_read

# Scalar

@test 'JSON - write scalar      0 value     → 1 value' {
    file_write "${F_JSON_OUT}" "scalar_empty" "value 1"
    run file_read "${F_JSON_OUT}" "scalar_empty"
    assert $state equals 0
    assert "$output" same_as 'value 1'
}

@test 'JSON - write scalar      1 value     → 1 value' {
    file_write "${F_JSON_OUT}" "scalar_value" "value 1"
    run file_read "${F_JSON_OUT}" "scalar_value"
    assert $state equals 0
    assert "$output" same_as 'value 1'
}

@test 'JSON - write scalar      1 value     → 0 value' {
    file_write "${F_JSON_OUT}" "scalar_value" ""
    run file_read "${F_JSON_OUT}" "scalar_value"
    assert $state equals 0
    assert "$output" is_empty
}

# Lists

@test 'JSON - reset list        2 values    → 0 value' {
    file_reset "${F_JSON_OUT}" "list_2"
    run file_read "${F_JSON_OUT}" "list_2"
    assert $state equals 0
    assert "$output" is_empty
}

@test 'JSON - add one item      0 value     → 1 value' {
    file_add "${F_JSON_OUT}" "list_0" "new value"
    run file_read "${F_JSON_OUT}" "list_0"
    assert $state equals 0
    assert "$output" same_as '"new value"'
}

@test 'JSON - add two items     2 values    → 4 values' {
    file_add "${F_JSON_OUT}" "list_2" "new value 1" "new value 2"
    run file_read "${F_JSON_OUT}" "list_2"
    assert $state equals 0
    assert "$output" same_as '"old value 1" "old value 2" "new value 1" "new value 2"'
}

@test 'JSON - remove one item   1 value     → 0 value' {
    file_rm "${F_JSON_OUT}" "list_1" "old value 1"
    run file_read "${F_JSON_OUT}" "list_1"
    assert $state equals 0
    assert "$output" is_empty
}

@test 'JSON - remove two items  3 value     → 1 value' {
    file_rm "${F_JSON_OUT}" "list_3" "old value 1" "old value 3"
    run file_read "${F_JSON_OUT}" "list_3"
    assert $state equals 0
    assert "$output" same_as '"old value 2"'
}

# ────────────────────────────────────────────────────────────────
# BREWFILE PARSER
# ────────────────────────────────────────────────────────────────

@test 'BREW - read formula      0 value' {
    run file_read "${EMPTY_BREW}" formulae
    assert $state equals 0
    assert "$output" is_empty
}

@test 'BREW - read casks        0 value' {
    run file_read "${EMPTY_BREW}" casks
    assert $state equals 0
    assert "$output" is_empty
}

@test 'BREW - read formulae     2 values' {
    run file_read "${FIXTURE_BREW}" formulae
    assert $state equals 0
    assert "$output" same_as '"old formula 1" "old formula 2"'
}

@test 'BREW - read casks        2 values' {
    run file_read "${FIXTURE_BREW}" casks
    assert $state equals 0
    assert "$output" same_as '"old cask 1" "old cask 2"'
}

# Now we assume that file_read is working as expected
# So we'll check further writing functions by reading the output file with file_read

# Scalar

@test 'BREW - write formula     2 values    → 3 values' {
    file_write "${F_BREW_OUT}" formulae "new formula 1"
    run file_read "${F_BREW_OUT}" formulae
    assert $state equals 0
    assert "$output" same_as '"old formula 1" "old formula 2" "new formula 1"'
}

@test 'BREW - write cask        2 values    → 3 values' {
    file_write "${F_BREW_OUT}" casks "new cask 1"
    run file_read "${F_BREW_OUT}" casks
    assert $state equals 0
    assert "$output" same_as '"old cask 1" "old cask 2" "new cask 1"'
}

# Reset

@test 'BREW - reset formulae    2 values    → 0 value' {
    file_reset "${F_BREW_OUT}" formulae
    run file_read "${F_BREW_OUT}" formulae
    assert $state equals 0
    assert "$output" is_empty
}

@test 'BREW - reset casks       2 values    → 0 value' {
    file_reset "${F_BREW_OUT}" casks
    run file_read "${F_BREW_OUT}" casks
    assert $state equals 0
    assert "$output" is_empty
}

# Add

@test 'BREW - add formulae      2 values    → 4 values' {
    file_add "${F_BREW_OUT}" formulae "new formula 1" "new formula 2"
    run file_read "${F_BREW_OUT}" formulae
    assert $state equals 0
    assert "$output" same_as '"old formula 1" "old formula 2" "new formula 1" "new formula 2"'
}

@test 'BREW - write casks       2 values    → 4 values' {
    file_add "${F_BREW_OUT}" casks "new cask 1" "new cask 2"
    run file_read "${F_BREW_OUT}" casks
    assert $state equals 0
    assert "$output" same_as '"old cask 1" "old cask 2" "new cask 1" "new cask 2"'
}

# Remove

@test 'BREW - remove formulae   2 values    → 0 value' {
    file_rm "${F_BREW_OUT}" formulae "old formula 1" "old formula 2"
    run file_read "${F_BREW_OUT}" formulae
    assert $state equals 0
    assert "$output" is_empty
}

@test 'BREW - remove casks      2 values    → 0 value' {
    file_rm "${F_BREW_OUT}" casks "old cask 1" "old cask 2"
    run file_read "${F_BREW_OUT}" casks
    assert $state equals 0
    assert "$output" is_empty
}

