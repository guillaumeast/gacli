#!/usr/bin/env zunit
###############################
# FICHIER /tests/unit/6_E2E_launcher.zunit
###############################

# ────────────────────────────────────────────────────────────────
# SETUP
# ────────────────────────────────────────────────────────────────

@setup {

    # TODO: add dockerfile/compose pour installer zsh et zunit aux containers !

    # Docker config
    IMAGES_MANUAL=(
        ubuntu                  # Linux → apt
        fedora                  # Linux → dnf
        archlinux               # Linux → pacman
        centos:7                # Linux → yum
    )
    IMAGES_CURL=(
        debian:bullseye         # Close to usual servers
        ubuntu:22.04            # Desktop/server standard
        fedora:latest           # RedHat like Rolling release
        alpine:latest           # Minimalist but wget included
        archlinux:latest        # Power user OS
        centos:7                # Old companies servers
        amazonlinux:2           # AWS servers
        opensuse/leap:latest    # Another RPM approach
        kalilinux/kali-rolling  # Pentest env
    )
    IMAGES_WGET=(
        debian:bullseye         # Close to usual servers
        ubuntu:22.04            # Desktop/server standard
        fedora:latest           # RedHat like Rolling release
        alpine:latest           # Minimalist but wget included
        archlinux:latest        # Power user OS
        centos:7                # Old companies servers
        amazonlinux:2           # AWS servers
        opensuse/leap:latest    # Another RPM approach
        kalilinux/kali-rolling  # Pentest env
    )


    # Fixture (virtual paths)
    DIR_VIRTUAL="/shared"
    DIR_VIRTUAL_UNIT="${DIR_VIRTUAL}/tests/unit"
    VIRTUAL_TEST_MANUAL="zunit \"${DIR_VIRTUAL_UNIT}/manual.zunit\" --output-text"
    VIRTUAL_TEST_CURL="zunit \"${DIR_VIRTUAL_UNIT}/curl.zunit\" --output-text"
    VIRTUAL_TEST_WGET="zunit \"${DIR_VIRTUAL_UNIT}/wget.zunit\" --output-text"

    # Fixture (local paths)
    DIR_LOCAL_FIXTURE="${DIR_LOCAL_FIXTURE}/E2E"
    DIR_LOCAL_OUTPUT_MAIN="${DIR_TESTS}/_output"
    DIR_LOCAL_OUTPUT_UNIT="${DIR_LOCAL_FIXTURE}/tests/_output"
    LOCAL_INSTALLER_ORIGIN="${DIR_ROOT}/installer/install.sh"
    LOCAL_INSTALLER_SHARED="${DIR_LOCAL_FIXTURE}/install.sh"

    # Reset temporary files
    [[ -d "${DIR_LOCAL_OUTPUT_UNIT}" ]] && rm -r "${DIR_LOCAL_OUTPUT_UNIT}"
    mkdir -p "${DIR_LOCAL_OUTPUT_UNIT}"
    cp "${LOCAL_INSTALLER_ORIGIN}" "${LOCAL_INSTALLER_SHARED}"
}

# ────────────────────────────────────────────────────────────────
# TESTS
# ────────────────────────────────────────────────────────────────

@test 'E22              → Linux             → Manual' {

    for image in $IMAGES_MANUAL; do
        docker run --rm -v "${DIR_LOCAL_FIXTURE}:${DIR_VIRTUAL}" "${image}" zsh -c "${VIRTUAL_TEST_MANUAL}"
        assert $? equals 0
        mv -f "${DIR_LOCAL_OUTPUT_UNIT}/output.txt" "${DIR_LOCAL_OUTPUT_MAIN}/${image}.output.txt"
    done
}

@test 'E22              → Linux             → Curl' {

    for image in $IMAGES_CURL; do
        docker run --rm -v "${DIR_LOCAL_FIXTURE}:${DIR_VIRTUAL}" "${image}" zsh -c "${VIRTUAL_TEST_CURL}"
        assert $? equals 0
        mv -f "${DIR_LOCAL_OUTPUT_UNIT}/output.txt" "${DIR_LOCAL_OUTPUT_MAIN}/${image}.output.txt"
    done
}

@test 'E22              → Linux             → Wget' {

    for image in $IMAGES_WGET; do
        docker run --rm -v "${DIR_LOCAL_FIXTURE}:${DIR_VIRTUAL}" "${image}" zsh -c "${VIRTUAL_TEST_WGET}"
        assert $? equals 0
        mv -f "${DIR_LOCAL_OUTPUT_UNIT}/output.txt" "${DIR_LOCAL_OUTPUT_MAIN}/${image}.output.txt"
    done
}

@test 'E22              → macOS             → Curl' {

    # TODO: Install GACLI with "${INSTALL_CMD_CURL}"
    # TODO: Run core commands
    # TODO: Run module commands
    # TODO: Uninstall GACLI
    # TODO: Delete container
}


# ────────────────────────────────────────────────────────────────
# CLEANUP
# ────────────────────────────────────────────────────────────────

@teardown {

    # Delete temporary files
    [[ -d "${DIR_LOCAL_OUTPUT_UNIT}" ]] && rm -r "${DIR_LOCAL_OUTPUT_UNIT}"
    [[ -f "${LOCAL_INSTALLER_SHARED}" ]] && rm "${LOCAL_INSTALLER_SHARED}"
}

