#!/usr/bin/env zunit
###############################
# FICHIER /tests/unit/parser.zunit
###############################

@setup {

    # Load script to test
    load "${DIR_SRC}/helpers/parser.zsh"

    # Fixtures
    DIR_FIXTURE="${DIR_FIXTURE}/parser"
    JSON_FIXTURE="${DIR_FIXTURE}/fixture.json"
    BREW_FIXTURE="${DIR_FIXTURE}/fixture.Brewfile"
    BREW_EMPTY="${DIR_FIXTURE}/empty.Brewfile"

    # Output files
    DIR_TMP="${DIR_FIXTURE}/.tmp"
    JSON_OUT="${DIR_TMP}/output.json"
    BREW_OUT="${DIR_TMP}/Brewfile"

    # Reset output files
    [[ -d "${DIR_TMP}" ]] && rm -r "${DIR_TMP}"
    mkdir -p "${DIR_TMP}"
    cp "${JSON_FIXTURE}" "${JSON_OUT}"
    cp "${BREW_FIXTURE}" "${BREW_OUT}"
}

# ────────────────────────────────────────────────────────────────
# TEST JSON FILES
# ────────────────────────────────────────────────────────────────

@test 'PARSER       → JSON → read' {

    # → 0 value (scalar)
    run file_read "${JSON_FIXTURE}" scalar_empty
    assert $state equals 0
    assert "$output" is_empty

    # → 1 value (scalar)
    run file_read "${JSON_FIXTURE}" scalar_value
    assert $state equals 0
    assert "$output" same_as 'old value 1'

    # → 0 value (list)
    run file_read "${JSON_FIXTURE}" list_0
    assert $state equals 0
    assert "$output" is_empty

    # → 2 values (list)
    run file_read "${JSON_FIXTURE}" list_2
    assert $state equals 0
    assert "${lines[1]}" same_as 'old value 1'
    assert "${lines[2]}" same_as 'old value 2'
}

@test 'PARSER       → JSON → write' {

    # → 0 value → 1 value (scalar)
    file_write "${JSON_OUT}" "scalar_empty" "value 1"
    run file_read "${JSON_OUT}" "scalar_empty"
    assert $state equals 0
    assert "$output" same_as 'value 1'

    # → 1 value → 1 value (scalar)
    file_write "${JSON_OUT}" "scalar_value" "value 1"
    run file_read "${JSON_OUT}" "scalar_value"
    assert $state equals 0
    assert "$output" same_as 'value 1'

    # → 1 value → 0 value (scalar)
    file_write "${JSON_OUT}" "scalar_value" ""
    run file_read "${JSON_OUT}" "scalar_value"
    assert $state equals 0
    assert "$output" is_empty
}

@test 'PARSER       → JSON → reset' {

    # → 2 values → 0 value
    file_reset "${JSON_OUT}" "list_2"
    run file_read "${JSON_OUT}" "list_2"
    assert $state equals 0
    assert "$output" is_empty
}

@test 'PARSER       → JSON → add' {

    # → 0 value → 1 value
    file_add "${JSON_OUT}" "list_0" "new value"
    run file_read "${JSON_OUT}" "list_0"
    assert $state equals 0
    assert "$output" same_as 'new value'

    # → 2 values → 4 values
    file_add "${JSON_OUT}" "list_2" "new value 1" "new value 2"
    run file_read "${JSON_OUT}" "list_2"
    assert $state equals 0
    assert "${lines[1]}" same_as 'old value 1'
    assert "${lines[2]}" same_as 'old value 2'
    assert "${lines[3]}" same_as 'new value 1'
    assert "${lines[4]}" same_as 'new value 2'
}

@test 'PARSER       → JSON → rm' {

    # → 1 value → 0 value
    file_rm "${JSON_OUT}" "list_1" "old value 1"
    run file_read "${JSON_OUT}" "list_1"
    assert $state equals 0
    assert "$output" is_empty

    # → 3 values → 1 value
    file_rm "${JSON_OUT}" "list_3" "old value 1" "old value 3"
    run file_read "${JSON_OUT}" "list_3"
    assert $state equals 0
    assert "$output" same_as 'old value 2'
}

# ────────────────────────────────────────────────────────────────
# TEST BREWFILES
# ────────────────────────────────────────────────────────────────

@test 'PARSER       → BREW → read' {

    # → 0 value (formulae)
    run file_read "${BREW_EMPTY}" formulae
    assert $state equals 0
    assert "$output" is_empty

    # → 0 value (casks)
    run file_read "${BREW_EMPTY}" casks
    assert $state equals 0
    assert "$output" is_empty

    # → 2 values (formulae)
    run file_read "${BREW_FIXTURE}" formulae
    assert $state equals 0
    assert "${lines[1]}" same_as 'old formula 1'
    assert "${lines[2]}" same_as 'old formula 2'

    # → 2 values (casks)
    run file_read "${BREW_FIXTURE}" casks
    assert $state equals 0
    assert "${lines[1]}" same_as 'old cask 1'
    assert "${lines[2]}" same_as 'old cask 2'
}

@test 'PARSER       → BREW → write' {

    # → 2 values → 3 values (formulae)
    file_write "${BREW_OUT}" formulae "new formula 1"
    run file_read "${BREW_OUT}" formulae
    assert $state equals 0
    assert "${lines[1]}" same_as 'old formula 1'
    assert "${lines[2]}" same_as 'old formula 2'
    assert "${lines[3]}" same_as 'new formula 1'

    # → 2 values → 3 values (casks)
    file_write "${BREW_OUT}" casks "new cask 1"
    run file_read "${BREW_OUT}" casks
    assert $state equals 0
    assert "${lines[1]}" same_as 'old cask 1'
    assert "${lines[2]}" same_as 'old cask 2'
    assert "${lines[3]}" same_as 'new cask 1'
}

@test 'PARSER       → BREW → reset' {

    # → 2 values → 0 value (formulae)
    file_reset "${BREW_OUT}" formulae
    run file_read "${BREW_OUT}" formulae
    assert $state equals 0
    assert "$output" is_empty

    # → 2 values → 0 value (casks)
    file_reset "${BREW_OUT}" casks
    run file_read "${BREW_OUT}" casks
    assert $state equals 0
    assert "$output" is_empty
}

@test 'PARSER       → BREW → add' {

    # → 2 values → 4 values (formulae)
    file_add "${BREW_OUT}" formulae "new formula 1" "new formula 2"
    run file_read "${BREW_OUT}" formulae
    assert $state equals 0
    assert "${lines[1]}" same_as 'old formula 1'
    assert "${lines[2]}" same_as 'old formula 2'
    assert "${lines[3]}" same_as 'new formula 1'
    assert "${lines[4]}" same_as 'new formula 2'

    # → 2 values → 4 values (casks)
    file_add "${BREW_OUT}" casks "new cask 1" "new cask 2"
    run file_read "${BREW_OUT}" casks
    assert $state equals 0
    assert "${lines[1]}" same_as 'old cask 1'
    assert "${lines[2]}" same_as 'old cask 2'
    assert "${lines[3]}" same_as 'new cask 1'
    assert "${lines[4]}" same_as 'new cask 2'
}

@test 'PARSER       → BREW → rm' {

    # → 2 values → 0 values (formulae)
    file_rm "${BREW_OUT}" formulae "old formula 1" "old formula 2"
    run file_read "${BREW_OUT}" formulae
    assert $state equals 0
    assert "$output" is_empty

    # → 2 values → 0 values (casks)
    file_rm "${BREW_OUT}" casks "old cask 1" "old cask 2"
    run file_read "${BREW_OUT}" casks
    assert $state equals 0
    assert "$output" is_empty
}

# ────────────────────────────────────────────────────────────────
# CLEANUP
# ────────────────────────────────────────────────────────────────

@teardown {

    # Delete temporary files
    [[ -d "${DIR_TMP}" ]] && rm -r "${DIR_TMP}"
}

