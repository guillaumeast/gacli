###################################################
# FICHIER gacli.zsh
###################################################
#!/usr/bin/env zsh
print "\033[90m🐥 Don't panic...\033[0m"

# OS
IS_MACOS=false
IS_LINUX=false

case "$OSTYPE" in
  darwin*) IS_MACOS=true ;;
  linux*)  IS_LINUX=true ;;
esac

# MODULES
GACLI_PATH="$(cd "$(dirname "${(%):-%x}")" && pwd)"
source "$GACLI_PATH/tools.zsh"
source "$GACLI_PATH/style.zsh"
source "$GACLI_PATH/install.zsh"
source "$GACLI_PATH/update.zsh"

# DATE
TODAY="$(date "+%Y-%m-%d")"

# TOOLS LIST (from Brewfile)
if [[ ! -f "$GACLI_PATH/Brewfile" ]]; then
    printStyled "error" "⛔ Brewfile not found in $GACLI_PATH"
else
    FORMULAE=($(grep '^brew "' "$GACLI_PATH/Brewfile" | cut -d'"' -f2))
    CASKS=($(grep '^cask "' "$GACLI_PATH/Brewfile" | cut -d'"' -f2))
fi

# Main function (triggered on each terminal startup)
main() {
    # Show ASCII art logo
    ascii_logo
                                    
    # Install or update if needed
    if [[ -f "$GACLI_PATH/.config" ]]; then
        # Update (needs coreutils installed)
        if command -v gdate >/dev/null 2>&1; then
            local next_update=$(grep "^next_update =" "$GACLI_PATH/.config" | cut -d= -f2 | xargs)
            if [[ -z "$next_update" || "$(gdate -d "$TODAY" +%s)" -ge "$(gdate -d "$next_update" +%s)" ]]; then
                update_tools
            fi
        else
            # Error if coreutils is not installed
            printStyled error "[main] coreutils is required for date comparison"
            printStyled warning "Auto-update has been disabled"
        fi
        print_tools
    else
        # Install GACLI
        install_gacli
    fi    
}

# Commands
case "$1" in
    update)
        update_tools
        ;;
    --no-main)
        # Do nothing (used for silent sourcing)
        ;;
    *)
        main
        ;;
esac

###################################################
# FICHIER tools.zsh
###################################################
#!/usr/bin/env zsh

# Add a number of days to a date (requires coreutils)
add_days() {
    local start_date=$1
    local add=$2

    if ! command -v gdate >/dev/null 2>&1; then
        printStyled error "[add_days] Missing dependency: gdate (from coreutils)"
        return 1
    fi

    gdate -d "$start_date +$add days" "+%Y-%m-%d"
}

###################################################
# FICHIER style.zsh
###################################################
#!/usr/bin/env zsh

# Formatting
BOLD="\033[1m"
UNDERLINE="\033[4m"

# Colors
BLACK='\033[30m'
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'
PURPLE='\033[35m'
CYAN='\033[36m'
ORANGE='\033[38;5;208m'
GREY='\033[90m'
NONE='\033[0m'

# Icons (on / off)
ICON_ON="${GREEN}⊙${NONE}"
ICON_OFF="${RED}○${NONE}"

# Custom LS_COLORS
if command -v gls >/dev/null 2>&1; then
    # Use GNU ls if available (for LS_COLORS compatibility)
    alias ls="gls --color=auto"

    # Custom colors
        # (scripts) yellow 33
        # (code files) light green 92
        # (executables other than code/scripts) green 32
        # (files) cyan 36
        # (directories) blue 34
        # (archives) magenta 35
        # (symbolic links) grey 90
    export LS_COLORS="di=34:fi=36:ln=90:ex=32:\
    *.sh=33:*.bsh=33:*.bash=33:*.zsh=33:*.ps1=33:\
    *.java=92:*.js=92:*.ts=92:*.jsx=92:*.tsx=92:*.c=92:*.cpp=92:*.h=92:*.hpp=92:*.cxx=92:\
    *.py=92:*.rb=92:*.rs=92:*.go=92:*.php=92:*.swift=92:*.kt=92:*.dart=92:*.lua=92:*.pl=92:*.r=92:*.sql=92:\
    *.html=92:*.css=92:*.scss=92:*.sass=92:*.json=92:*.xml=92:*.yaml=92:*.yml=92:\
    *.tar=35:*.tgz=35:*.gz=35:*.zip=35"
fi

# ASCII art logo
ascii_logo() {
    print "${ORANGE}  _____          _____ _      _____ ${NONE}"
    print "${ORANGE} / ____|   /\\\\   / ____| |    |_   _|${NONE}"
    print "${ORANGE}| |  __   /  \\\\ | |    | |      | |  ${NONE}"
    print "${ORANGE}| | |_ | / /\\\\ \\\\| |    | |      | |  ${NONE}"
    print "${ORANGE}| |__| |/ ____ \\\\ |____| |____ _| |_ ${NONE}"
    print "${ORANGE} \\\\_____/_/    \\\\_\\\\_____|______|_____|${NONE}"
    print ""
}

# Print tools status
print_tools() {
    local output_formulae=""
    local output_casks=""

    # formulae
    for formula in $FORMULAE; do
        if [[ "$formula" = "coreutils" ]]; then
            if command -v gdate >/dev/null 2>&1; then
                output_formulae+="${ICON_ON}"
            else
                output_formulae+="${ICON_OFF}"
            fi
        else
            if command -v $formula >/dev/null 2>&1; then
                output_formulae+="${ICON_ON}"
            else
                output_formulae+="${ICON_OFF}"
            fi
        fi
        output_formulae+=" ${ORANGE}$formula${NONE} ${GREY}|${NONE} "
    done

    # Casks
    for cask in $CASKS; do
        # "my-cask-name" → "My Cask Name.app"
        local app_name="$(echo "$cask" | sed -E 's/-/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1').app"

        # Check .app folders first for speed, fallback to brew if missing
        if [[ -d "/Applications/$app_name" || -d "$HOME/Applications/$app_name" ]]; then
            output_casks+="${ICON_ON}"
        elif brew list --cask "$cask" >/dev/null 2>&1; then
            output_casks+="${ICON_ON}"
        else
            output_casks+="${ICON_OFF}"
        fi
        output_casks+=" ${CYAN}$cask${NONE} ${GREY}|${NONE} "
    done

    # Print both lines (removing trailing " | ")
    print "${output_formulae% ${GREY}|${NONE} }"
    print "${output_casks% ${GREY}|${NONE} }"
    print ""
}

# Formatted output
printStyled() {

    # Variables
    local style=$1
    local rawMessage=$2
    local finalMessage=""
    local color=$NONE

    # Argument check
    if [[ -z "$style" || -z "$rawMessage" ]]; then
        printStyled error "Veuillez fournir un ${YELLOW}style${RED} et un ${YELLOW}message${RED} pour afficher du texte"
        return 1
    fi

    # Formatting
    case "$style" in
        error)
            color=$RED
            rawMessage="❌ ${rawMessage:-"❌ Oups, quelque chose s'est mal passe... 😶‍🌫️"}"
            finalMessage="${RED}$rawMessage${color}"
            print "${color}${BOLD}$finalMessage${NONE}" >&2
            return
            ;;
        success)
            color=$GREEN
            rawMessage="✦ ${rawMessage:-"✦ Bravo, tout s'est bien passe ! 🎉"}"
            finalMessage="$rawMessage"
            ;;
        warning)
            color=$YELLOW
            rawMessage="⚠️  ${rawMessage:-"⚠️  Attention, quelque chose s'est mal passe... 👀"}"
            finalMessage="${BOLD}$rawMessage"
            ;;
        info)
            color=$GREY
            rawMessage="✧ ${rawMessage:-"✧ Voilà où on est est 🫡"}"
            finalMessage="${rawMessage}"
            ;;
        highlight)
            color=$NONE
            rawMessage="👉 ${rawMessage:-"👉 Jette un oeil à ça..."}"
            finalMessage="$rawMessage"
            ;;
        debug)
            color=$YELLOW
            rawMessage="🔦 ===> ${BOLD}${rawMessage:-"🔦 ===> Alors, ça marche ? 🤷‍♂️"}${NONE}"
            finalMessage="$rawMessage"
            ;;
        *)
            print "$rawMessage"
            return
            ;;
    esac

    # Display
    print "${color}$finalMessage${NONE}"
}

###################################################
# FICHIER install.zsh
###################################################
#!/usr/bin/env zsh

# Global installer
install_gacli() {
    # Config
    ask_frequency
    create_config_file

    # Install
    install_brew
    update_tools
    update_zshrc
}

# Ask user for auto-update frequency (type safe)
ask_frequency() {
    # Welcome Message
    print "👋 ${CYAN}Welcome to ${BOLD}${ORANGE}GACLI${NONE}${CYAN}, the CLI that makes your dev life easier!${NONE}"
    print ""
    print "${CYAN}Let’s start by choosing the update frequency,${NONE}"
    print "${CYAN}then I’ll take care of installing all the tools you need${NONE} 💻✨"
    print ""

    # Question
    while true; do
        print -n "👉 ${BOLD}How many days between each auto-update? ${NONE}"
        read -r FREQ_DAYS

        # Check format
        if [[ "$FREQ_DAYS" =~ ^[0-9]+$ ]] && [[ $FREQ_DAYS -gt 0 ]]; then
            break
        else
            printStyled "error" "⛔ Invalid input. Please enter a positive number"
        fi
    done

    # Loading mesage
    print ""
    printStyled "info" "Installing all tools... (this may take a few minutes) ⏳"
}

# Homebrew installer
install_brew() {
    # Homebrew install
    if ! command -v brew >/dev/null 2>&1; then
        printStyled info "Installing ${ORANGE}Homebrew${GREY}..."

        if $IS_MACOS; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        elif $IS_LINUX; then
            NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        else
            printStyled error "[install_brew] Unsupported OS: $OSTYPE"
            return 1
        fi

        # Add Homebrew to PATH for current session (cross-platform)
        local brew_exec_path="$(command -v brew)"
        eval "$("$brew_exec_path" shellenv)"

        # Refresh command hash table
        hash -r
    fi
}

# Create config file
create_config_file() {
    echo "date = $TODAY" > "$GACLI_PATH/.config"
    echo "update_frequency = $FREQ_DAYS" >> "$GACLI_PATH/.config"
    
    # Try to compute date (coreutils needed)
    local next_update=$(add_days $TODAY $FREQ_DAYS)
    if [[ -z "$next_update" ]]; then
        printStyled error "[create_config_file] Failed to compute next update date"
        printStyled warning "Auto-update has been disabled"
        echo "next_update = " >> "$GACLI_PATH/.config"
    else
        echo "next_update = $next_update" >> "$GACLI_PATH/.config"
    fi
}

# Update zshrc
update_zshrc() {
    local zshrc_path="$HOME/.zshrc"

    # Ask user for .zshrc if not found
    while [[ ! -f "$zshrc_path" ]]; do
        printStyled "warning" "[install_gacli] .zshrc not found at $zshrc_path"
        print -n "👉 ${BOLD}Where is your .zshrc located (full path)? ${NONE}"
        read -r zshrc_path
    done

    echo "" >> "$zshrc_path"
    echo "# GACLI" >> "$zshrc_path"

    # Source gacli.zsh (if not already present)
    if ! grep -q "source \"$GACLI_PATH/gacli.zsh\"" "$zshrc_path"; then
        echo "source \"$GACLI_PATH/gacli.zsh\"" >> "$zshrc_path"
    fi

    # Add alias to run GACLI as command
    if ! grep -q 'alias gacli=' "$zshrc_path"; then
        echo "alias gacli=\"zsh $GACLI_PATH/gacli.zsh\"" >> "$zshrc_path"
    fi

    # Confirm
    printStyled warning "Restart your terminal or run 'source ~/.zshrc' to unlock gacli commands"
    print ""
}

###################################################
# FICHIER update.zsh
###################################################
#!/usr/bin/env zsh

# Update homebrew & formulae & casks
update_tools() {
    # Update Homebrew
    brew update 1>/dev/null

    # Install/uninstall formulae & casks referring to the Brewfile
    brew bundle --file="$GACLI_PATH/Brewfile" 1>/dev/null

    # Update formulae & casks
    brew upgrade 1>/dev/null

    # Cleanup
    brew cleanup 1>/dev/null

    # Update .config file
    update_config_file

    printStyled "success" "Ready to go 🚀"
    print ""
}

# Update config file
update_config_file() {
    local config_file="$GACLI_PATH/.config"
    local freq_days=$(grep "^update_frequency" "$config_file" | cut -d= -f2 | xargs)

    echo "date = $TODAY" > "$config_file"
    echo "update_frequency = $freq_days" >> "$config_file"

    # Try to compute next_update date
    local next_update=$(add_days $TODAY $freq_days)
    if [[ -z "$next_update" ]]; then
        printStyled error "[update_config_file] Failed to compute next update date"
        printStyled warning "Auto-update has been disabled"
        echo "next_update = " >> "$GACLI_PATH/.config"
    else
        echo "next_update = $next_update" >> "$config_file"
    fi
}

# GACLI v0.4

######### NEEDED #########

brew "coreutils" # !!! NEVER REMOVE THIS ONE, GACLI NEEDS IT TO RUN !!!

######### CORE #########

# Directory structure visualizer
brew "tree"

# IDE
cask "visual-studio-code"

# Versionning
brew "git"

# Hosting
brew "gh"

######### LANGUAGES #########

# Json processor
brew "jq"

# Python version manager
brew "pyenv"

######### IA #########

# Local LLM engine
cask "ollama"

######### FILES #########

# Universal document converter
brew "pandoc"

######### MONITORING #########

# Hardware monitor (macOS)
cask "stats"

######### QoL #########

# Clipboard manager (macOS)
cask "maccy"

